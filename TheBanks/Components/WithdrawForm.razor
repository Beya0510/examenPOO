@page "/withdraw"
@using global::TheBanks.Models
@using global::TheBanks.Services
@inject BankService BankService
@inject IJSRuntime JSRuntime

<EditForm Model="@WithdrawModel" OnValidSubmit="HandleWithdraw">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Compte</label>
        <InputSelect @bind-Value="WithdrawModel.AccountNumber">
            <option value="">Sélectionnez un compte</option>
            @foreach (var account in BankService.Bank.Accounts.Values)
            {
                <option value="@account.Number">@account.Number</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => WithdrawModel.AccountNumber)" />
    </div>

    <div class="form-group">
        <label>Montant</label>
        <InputNumber @bind-Value="WithdrawModel.Amount" class="form-control" />
        <ValidationMessage For="@(() => WithdrawModel.Amount)" />
    </div>

    <button type="submit" class="btn btn-danger">Retirer</button>
</EditForm>

@code {
    private WithdrawModel WithdrawModel = new();
    public int Balance { get; set; }

    private async Task HandleWithdraw()
    {
        try
        {
            var account = BankService.Bank.Accounts[WithdrawModel.AccountNumber];
            account.Withdraw(WithdrawModel.Amount); // Appelle la méthode de retrait

            // Sauvegarde des données de la banque
            await BankService.SaveBankData();

            await JSRuntime.InvokeVoidAsync("alert", "Retrait effectué avec succès !");
        }
        catch (Exception ex)
        {
            // Gestion des erreurs
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur lors du retrait : {ex.Message}");
        }
    }
}