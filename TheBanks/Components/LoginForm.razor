@page "/login" 
@using global::TheBanks.Models
@using global::TheBanks.Services
@inject AuthService AuthService 
@inject NavigationManager Navigation 
@inject IJSRuntime JSRuntime 


<div class="auth-container">
    <h2>Se connecter</h2>
    
    <EditForm Model="@_loginCredentials" OnValidSubmit="HandleLogin"> // Formulaire de connexion
        <DataAnnotationsValidator /> // Validation des annotations de données
        
        <div class="form-group">
            <label>Email</label>
            <InputText @bind-Value="_loginCredentials.Email" class="form-control" /> // Champ pour l'email
            <ValidationMessage For="@(() => _loginCredentials.Email)" /> // Message d'erreur pour l'email
        </div>

        <div class="form-group">
            <label>Mot de passe</label>
            <InputText type="password" @bind-Value="_loginCredentials.Password" class="form-control" /> // Champ pour le mot de passe
            <ValidationMessage For="@(() => _loginCredentials.Password)" /> // Message d'erreur pour le mot de passe
        </div>

        <button type="submit" class="btn btn-primary">Se connecter</button> // Bouton pour soumettre le formulaire
        
        <div class="mt-3">
            <a href="/register" class="text-secondary">Pas encore de compte ? S'inscrire</a> // Lien vers la page d'inscription
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(_errorMessage)) // Affiche un message d'erreur si présent
    {
        <div class="alert alert-danger mt-3">
            @_errorMessage
        </div>
    }
</div>

@code {
    private LoginCredentials _loginCredentials = new(); // Modèle pour les informations de connexion
    private string _errorMessage = string.Empty; // Message d'erreur

    // Méthode pour gérer la soumission du formulaire de connexion
    private async Task HandleLogin()
    {
        try
        {
            // Vérifie les informations d'identification
            if (await AuthService.Login(_loginCredentials.Email, _loginCredentials.Password)) 
            {
                await JSRuntime.InvokeVoidAsync("alert", "Connexion réussie !"); 
                Navigation.NavigateTo("/accounts-overview"); // Redirige vers la vue d'ensemble des comptes
            }
            else
            {
                _errorMessage = "Email ou mot de passe incorrect."; // Message d'erreur
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message; // Capture et affiche l'erreur
        }
    }
}