@page "/transfer"
@using global::TheBanks.Models
@using global::TheBanks.Services
@inject BankService BankService
@inject IJSRuntime JSRuntime

<EditForm Model="@_transferModel" OnValidSubmit="HandleTransfer">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Compte source</label>
        <InputSelect @bind-Value="_transferModel.SourceAccount">
            <option value="">Sélectionnez un compte</option>
            @foreach (var account in BankService.Bank.Accounts.Values)
            {
                <option value="@account.Number">@account.Number</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _transferModel.SourceAccount)" />
    </div>

    <div class="form-group">
        <label>Compte destinataire</label>
        <InputSelect @bind-Value="_transferModel.TargetAccount">
            <option value="">Sélectionnez un compte</option>
            @foreach (var account in BankService.Bank.Accounts.Values)
            {
                <option value="@account.Number">@account.Number</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _transferModel.TargetAccount)" />
    </div>

    <div class="form-group">
        <label>Montant</label>
        <InputNumber @bind-Value="_transferModel.Amount" />
        <ValidationMessage For="@(() => _transferModel.Amount)" />
    </div>

    <button type="submit" class="btn btn-success">Transférer</button>
</EditForm>

@code {
    // Modèle pour le transfert d'argent
    private TransferModel _transferModel = new();

    // Méthode pour gérer le transfert
    private async Task HandleTransfer()
    {
        try
        {
            // Vérifie que les comptes source et destinataire sont différents
            if (_transferModel.SourceAccount == _transferModel.TargetAccount)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Les comptes source et destinataire ne peuvent pas être identiques.");
                return;
            }

            // Récupère les comptes source et destinataire
            var sourceAccount = BankService.Bank.Accounts[_transferModel.SourceAccount];
            var targetAccount = BankService.Bank.Accounts[_transferModel.TargetAccount];

            // Effectue le retrait du compte source
            sourceAccount.Withdraw(_transferModel.Amount);

            // Effectue le dépôt sur le compte destinataire
            targetAccount.Deposit(_transferModel.Amount);

            // Sauvegarde des données de la banque
            await BankService.SaveBankData();

            // Affiche un message de succès
            await JSRuntime.InvokeVoidAsync("alert", "Transfert effectué avec succès !");
        }
        catch (InsufficientBalanceException ex)
        {
            // Gestion des erreurs de solde insuffisant
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur : {ex.Message}");
        }
        catch (Exception ex)
        {
            // Gestion des autres erreurs
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur lors du transfert : {ex.Message}");
        }
    }
}