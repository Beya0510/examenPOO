@page "/register" 
@using TheBanks.Models 
@using TheBanks.Services 
@inject AuthService AuthService 
@inject NavigationManager Navigation 
@inject IJSRuntime JSRuntime 


<div class="auth-container">
    <h2>Créer un compte</h2>
    
    <EditForm Model="@NewUser" OnValidSubmit="HandleRegister"> // Correction ici : suppression de l'espace
        <DataAnnotationsValidator /> // Validation des annotations de données
        
        <div class="form-group">
            <label>Prénom</label>
            <InputText @bind-Value="NewUser .FirstName" class="form-control" /> // Champ pour le prénom
            <ValidationMessage For="@(() => NewUser .FirstName)" /> // Message d'erreur pour le prénom
        </div>

        <div class="form-group">
            <label>Nom</label>
            <InputText @bind-Value="NewUser .LastName" class="form-control" /> // Champ pour le nom
            <ValidationMessage For="@(() => NewUser .LastName)" /> // Message d'erreur pour le nom
        </div>

        <div class="form-group">
            <label>Email</label>
            <InputText @bind-Value="NewUser .Email" class="form-control" /> // Champ pour l'email
            <ValidationMessage For="@(() => NewUser .Email)" /> // Message d'erreur pour l'email
        </div>

        <div class="form-group">
            <label>Date de naissance</label>
            <InputDate @bind-Value="NewUser .BirthDate" class="form-control" /> // Champ pour la date de naissance
            <ValidationMessage For="@(() => NewUser .BirthDate)" /> // Message d'erreur pour la date de naissance
        </div>

        <div class="form-group">
            <label>Mot de passe</label>
            <InputText type="password" @bind-Value="NewUser .Password" class="form-control" /> // Champ pour le mot de passe
            <ValidationMessage For="@(() => NewUser .Password)" /> // Message d'erreur pour le mot de passe
        </div>

        <button type="submit" class="btn btn-primary">S'inscrire</button> // Bouton pour soumettre le formulaire
        
        <div class="mt-3">
            <a href="/login" class="text-secondary">Déjà un compte ? Se connecter</a> // Lien vers la page de connexion
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(ErrorMessage)) // Affiche un message d'erreur si présent
    {
        <div class="alert alert-danger mt-3">
            @ErrorMessage
        </div>
    }
</div>

@code {
    private User NewUser  = new(); // Modèle pour l'enregistrement d'un utilisateur
    private string ErrorMessage = string.Empty; // Message d'erreur

    // Méthode pour gérer la soumission du formulaire
    private async Task HandleRegister()
    {
        try
        {
            // Appel de la méthode Register avec les informations de l'utilisateur
            AuthService.Register(NewUser .Email, NewUser .Password, NewUser .FirstName, NewUser .LastName, NewUser .BirthDate);
            await JSRuntime.InvokeVoidAsync("alert", "Inscription réussie !"); // Affiche un message de succès
            Navigation.NavigateTo("/login"); // Redirige vers la page de connexion
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message; // Capture et affiche l'erreur
        }
    }
}