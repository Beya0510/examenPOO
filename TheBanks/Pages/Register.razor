@page "/register" 
@using global::TheBanks.Models
@using global::TheBanks.Services
@inject AuthService AuthService 
@inject NavigationManager Navigation 
@inject IJSRuntime JSRuntime 


<div class="auth-container">
    <h2>Créer un compte</h2>
    
    <EditForm Model="@_newUser" OnValidSubmit="HandleRegister"> // Correction ici : suppression de l'espace
        <DataAnnotationsValidator /> // Validation des annotations de données
        
        <div class="form-group">
            <label>Prénom</label>
            <InputText @bind-Value="_newUser.FirstName" class="form-control" /> // Champ pour le prénom
            <ValidationMessage For="@(() => _newUser.FirstName)" /> // Message d'erreur pour le prénom
        </div>

        <div class="form-group">
            <label>Nom</label>
            <InputText @bind-Value="_newUser.LastName" class="form-control" /> // Champ pour le nom
            <ValidationMessage For="@(() => _newUser.LastName)" /> // Message d'erreur pour le nom
        </div>

        <div class="form-group">
            <label>Email</label>
            <InputText @bind-Value="_newUser.Email" class="form-control" /> // Champ pour l'email
            <ValidationMessage For="@(() => _newUser.Email)" /> // Message d'erreur pour l'email
        </div>

        <div class="form-group">
            <label>Date de naissance</label>
            <InputDate @bind-Value="_newUser.BirthDate" class="form-control" /> // Champ pour la date de naissance
            <ValidationMessage For="@(() => _newUser.BirthDate)" /> // Message d'erreur pour la date de naissance
        </div>

        <div class="form-group">
            <label>Mot de passe</label>
            <InputText type="password" @bind-Value="_newUser.Password" class="form-control" /> // Champ pour le mot de passe
            <ValidationMessage For="@(() => _newUser.Password)" /> // Message d'erreur pour le mot de passe
        </div>

        <button type="submit" class="btn btn-primary">S'inscrire</button> // Bouton pour soumettre le formulaire
        
        <div class="mt-3">
            <a href="/login" class="text-secondary">Déjà un compte ? Se connecter</a> // Lien vers la page de connexion
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(_errorMessage)) // Affiche un message d'erreur si présent
    {
        <div class="alert alert-danger mt-3">
            @_errorMessage
        </div>
    }
</div>

@code {
    private User _newUser  = new(); // Modèle pour l'enregistrement d'un utilisateur
    private string _errorMessage = string.Empty; // Message d'erreur

    // Méthode pour gérer la soumission du formulaire
    private async Task HandleRegister()
    {
        try
        {
            // Appel de la méthode Register avec les informations de l'utilisateur
            AuthService.Register(_newUser.Email, _newUser.Password, _newUser.FirstName, _newUser.LastName, _newUser.BirthDate);
            await JSRuntime.InvokeVoidAsync("alert", "Inscription réussie !"); // Affiche un message de succès
            Navigation.NavigateTo("/login"); // Redirige vers la page de connexion
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message; // Capture et affiche l'erreur
        }
    }
}